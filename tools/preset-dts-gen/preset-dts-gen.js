const fs = require('fs');

function capitalize(str)
{
	return str.charAt(0).toUpperCase() + str.slice(1);
}

function collectUniqueValues(obj)
{
	let values = [];
	for (let key in obj)
	{
		let value = obj[key].set;
		if (typeof value === "string")
		{
			values.push(value);
		}
		else if (Array.isArray(value))
		{
			values = values.concat(value);
		}
	}
	return [...new Set(values)];
}

function presetGenerator(name, preset)
{
	let interfaceName = capitalize(name);
	let properties = collectUniqueValues(preset.channels);
	let interfaceContent = `interface ${interfaceName} extends Preset {\n`;
	let interfaceProperties = [];

	for (let i = 0; i < properties.length; i++)
	{
		let propertyName = properties[i];
		let propertyType = "string[]|string";
		let property = `\t${propertyName}: ${propertyType};`;
		interfaceProperties.push(property);
	}

	interfaceContent += interfaceProperties.join('\n');
	interfaceContent += '\n}\n';
	return interfaceContent;
}

/** generates the Preset Typescript class declaration a function for each preset in the presets object. */
function generatePresetClass(presets)
{
	let content = `
/** Collection of factory functions for creating preset chart configs. */
export class Presets {
	constructor();
`;
	for (let name in presets)
	{
		let methodName = name;
		let parameterType = capitalize(name);
		let methodDeclaration = `\t${methodName}(config: ${parameterType}): any;`;
		content += methodDeclaration + '\n';
	}
	content += '}\n';
	return content;
}

function generatePresets(presets)
{
	let content = `
// This file is auto-generated by preset-dts-gen.js
// Do not edit this file directly.
// Instead, edit the presets in src/apps/weblib/js-api/presets.js
// and run tools/preset-dts-gen/preset-dts-gen.js to regenerate this file.

interface Preset {
	legend?: 'color'|'lightness'|'size'|null;
	title?: string|null;
	reverse?: boolean;
	sort?: 'none'|'byValue';
}

`;
	for (let presetName in presets)
	{
		content += presetGenerator(presetName, presets[presetName]) + '\n';
	}
	content += generatePresetClass(presets) + '\n';

	return content;
}

let presetPath = process.argv[2];
let outputPath = process.argv[3];

if (!presetPath) presetPath = '../../src/apps/weblib/js-api/presets.js';
if (!outputPath) outputPath = '../../example/lib/presets.d.ts';

import(presetPath)
.then(Presets => {
	let presets = new Presets.default()._presetConfigs;
	let content = generatePresets(presets);
	console.log("Writing to " + outputPath);
	fs.writeFileSync(outputPath, content);
}).catch(err => {
	console.error(err);
});
